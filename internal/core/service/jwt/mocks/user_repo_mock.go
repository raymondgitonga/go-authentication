// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package jwt_mocks

import (
	"github.com/raymondgitonga/go-authentication/internal/core/service/jwt"
	"sync"
)

// Ensure, that RepositoryUserMock does implement UserRepository.
// If this is not the case, regenerate this file with moq.
var _ jwt.UserRepository = &RepositoryUserMock{}

// RepositoryUserMock is a mock implementation of UserRepository.
//
//	func TestSomethingThatUsesRepositoryUser(t *testing.T) {
//
//		// make and configure a mocked UserRepository
//		mockedRepositoryUser := &RepositoryUserMock{
//			GetUserFunc: func(name string) (string, error) {
//				panic("mock out the GetUser method")
//			},
//		}
//
//		// use mockedRepositoryUser in code that requires UserRepository
//		// and then make assertions.
//
//	}
type RepositoryUserMock struct {
	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(name string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockGetUser sync.RWMutex
}

// GetUser calls GetUserFunc.
func (mock *RepositoryUserMock) GetUser(name string) (string, error) {
	if mock.GetUserFunc == nil {
		panic("RepositoryUserMock.GetUserFunc: method is nil but UserRepository.GetUser was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(name)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedRepositoryUser.GetUserCalls())
func (mock *RepositoryUserMock) GetUserCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

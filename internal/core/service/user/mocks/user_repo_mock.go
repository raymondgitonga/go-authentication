// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user_mocks

import (
	"github.com/raymondgitonga/go-authentication/internal/core/service/user"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ user.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			AddUserFunc: func(name string, secret []byte) error {
//				panic("mock out the AddUser method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// AddUserFunc mocks the AddUser method.
	AddUserFunc func(name string, secret []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// AddUser holds details about calls to the AddUser method.
		AddUser []struct {
			// Name is the name argument value.
			Name string
			// Secret is the secret argument value.
			Secret []byte
		}
	}
	lockAddUser sync.RWMutex
}

// AddUser calls AddUserFunc.
func (mock *RepositoryMock) AddUser(name string, secret []byte) error {
	if mock.AddUserFunc == nil {
		panic("RepositoryMock.AddUserFunc: method is nil but Repository.AddUser was just called")
	}
	callInfo := struct {
		Name   string
		Secret []byte
	}{
		Name:   name,
		Secret: secret,
	}
	mock.lockAddUser.Lock()
	mock.calls.AddUser = append(mock.calls.AddUser, callInfo)
	mock.lockAddUser.Unlock()
	return mock.AddUserFunc(name, secret)
}

// AddUserCalls gets all the calls that were made to AddUser.
// Check the length with:
//
//	len(mockedRepository.AddUserCalls())
func (mock *RepositoryMock) AddUserCalls() []struct {
	Name   string
	Secret []byte
} {
	var calls []struct {
		Name   string
		Secret []byte
	}
	mock.lockAddUser.RLock()
	calls = mock.calls.AddUser
	mock.lockAddUser.RUnlock()
	return calls
}
